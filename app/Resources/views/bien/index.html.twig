{% extends 'base_new.html.twig' %}
{% block body %}

	<h1>Listado de bienes MIGyD
		<h3>
			{% with {'pdfp': false}%}
			{{ block("tableBlockBien", "./bien/tableBlockBien.twig") }}
			{% endwith %}
			<ul>
				<div class="btn-group" role="group" aria-label="Basic outlined example">

					<a href="{{ path('bien_new') }}" class="btn btn-outline-primary">
						Alta nuevo bien
					</a>
					<a href="{{ path('bienes_homepage') }}" class="btn btn-outline-primary">
						Volver al men√∫ principal
					</a>
					<a id="generarPdf" {# href="{{ path('pdf_bien', {"filtro": "cx", "campo": "getDescripcion" }) }}" #} class="btn btn-outline-primary">
						Generar PDF
					</a>
				</div>
			</ul>
		</h3>


		<script>
			// ---- generar pdf ----
let inputVal = '';
let radioCheck = "";
let rch;
let gpdf = document.getElementById('generarPdf');

gpdf.addEventListener("click", () => window.open(`${
window.location.href
}pdf_bien/${inputVal}/${radioCheck}`));
// ------------------------
// ------ search box ------
let input = document.getElementById('searchbox');

// transforma HTMLCollection en Array
let rowsData = Array.prototype.slice.call(document.getElementById("tableData").rows);

input.addEventListener('input', (e) => {
inputVal = e.target.value.toUpperCase()
let matcher = new RegExp (`${inputVal}`);

rowsData.map((row) => {
let description = row.cells[3].innerHTML.toUpperCase()
let usuario = row.cells[2].innerHTML.toUpperCase()
let lugar = row.cells[4].innerHTML.toUpperCase()

if (description.match(matcher) || (usuario.match(matcher)) || (lugar.match(matcher))) {
row.style.display = "table-row"
} else 
row.style.display = "none"





})
}, false);
// ----------------------
// ------ selector ------
if (document.querySelector('input[name="selectorCampo"]')) {

document.querySelectorAll('input[name="selectorCampo"]').forEach((elem) => {

elem.addEventListener("change", (e) => {
radioCheck = e.target.value;
input.disabled = false
input.placeholder = 'Buscar'
});
});
}
		</script>

	{% endblock %}
